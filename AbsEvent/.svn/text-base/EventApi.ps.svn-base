%!PS-Adobe-3.0
%%Title: (EventApi.doc)
%%Creator: (FrameMaker: LaserWriter 8 8.1.1)
%%CreationDate: (6:58 PM Sunday, October 29, 1995)
%%For: (Bob Jacobsen)
%%Pages: 4
%%DocumentFonts: Times-Roman Times-Bold Courier Symbol
%%DocumentNeededFonts: Times-Roman Times-Bold Courier Symbol
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%ADO_PaperArea: -8 -18 784 594
%ADO_ImageableArea: 0 0 776 576
%%EndComments
/md 135 dict def md begin
/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
%%BeginFile: adobe_psp_customps
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/$t Z
/$p Z
/$s Z
/$o 1. def
/2state? false def
/ps Z
level2 startnoload
/pushcolor/currentrgbcolor ld
/popcolor/setrgbcolor ld
/setcmykcolor where
{
pop/currentcmykcolor where
{
pop/pushcolor/currentcmykcolor ld
/popcolor/setcmykcolor ld
}if
}if
level2 endnoload level2 not startnoload
/pushcolor
{
currentcolorspace $c eq
{
currentcolor currentcolorspace true
}{
currentcmykcolor false
}ifelse
}bd
/popcolor
{
{
setcolorspace setcolor
}{
setcmykcolor
}ifelse
}bd
level2 not endnoload
/pushstatic
{
ps
2state?
$o
$t
$p
$s
}bd
/popstatic
{
/$s xs
/$p xs
/$t xs
/$o xs
/2state? xs
/ps xs
}bd
/pushgstate
{
save errordict/nocurrentpoint{pop 0 0}put
currentpoint
3 -1 roll restore
pushcolor
currentlinewidth
currentlinecap
currentlinejoin
currentdash exch aload length
np clippath pathbbox
$m currentmatrix aload pop
}bd
/popgstate
{
$m astore setmatrix
2 index sub exch
3 index sub exch
rC
array astore exch setdash
setlinejoin
setlinecap
lw
popcolor
np :M
}bd
/bu
{
pushgstate
gR
pushgstate
2state?
{
gR
pushgstate
}if
pushstatic
pm restore
mT concat
}bd
/bn
{
/pm save store
popstatic
popgstate
gS
popgstate
2state?
{
gS
popgstate
}if
}bd
/cpat{pop 64 div G 8{pop}repeat}bd
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if
end		% md
%%EndProlog
%%BeginSetup
md begin
countdictstack
[
{%stopped
%%BeginFeature: *ManualFeed False
level2 {1 dict dup /ManualFeed false put setpagedevice}{statusdict begin /manualfeed false store end} ifelse
%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *InputSlot Upper

%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *PageRegion Letter
level2 { 
		2 dict dup /PageSize [612 792] put dup /ImagingBBox null put setpagedevice
	}{
		/letter where {pop letter}{letterR} ifelse
	} ifelse
%%EndFeature
}featurecleanup
(Bob Jacobsen)setjob
/pT[1 0 0 -1 18 784]def/mT[1 0 0 -1 18 784]def
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Roman
%%IncludeFont: Times-Bold
%%IncludeFont: Courier
%%IncludeFont: Symbol
/f0_1/Times-Roman :mre
/f0_12 f0_1 12 scf
/f0_10 f0_1 10 scf
/f1_1/Times-Bold :mre
/f1_18 f1_1 18 scf
/f1_14 f1_1 14 scf
/f2_1/Courier :mre
/f2_10 f2_1 10 scf
/f3_1/Symbol :bsr
240/apple pd
:esr /f3_12 f3_1 12 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
% Frame PostScript Prolog for use with Macintosh Frame Products 4.0.2
% Copyright (c) 1986-94 Frame Technology Corp.  All rights reserved.
%%BeginProcSet: "FrameMacDict" 402 17
userdict/FrameMacDict 200 dict put FrameMacDict begin systemdict/setpacking
known{/fMSP currentpacking def true setpacking}if[/fM1/fM18/fM2/fM3/fM4/fM5/fM6
/fM8/fM9/fMBC/fMBM/fMC/fMCD/fMCG/fMCK/fMCM/fMCl/fMCO/fMFl/fMGC/fMGL/fMGM/fMIx
/fMJB/fMJC/fMJG/fMJK/fMJM/fMJR/fMJY/fMK/fML1/fMM/fMN/fMNC/fMNg/fMND/fMOx/fMPC
/fMPH/fMPt/fMRC/fMS/fMSJ/fMUC/fMUM/fMUY/fMY/fMat/fMa2/fMi/fMk/fms/fmBS/fMdp
/freq/sangle/sflipx/sflipy/pflipx/pflipy/xx/yy/xindex/yindex/fM1B/fM0B]{0 def}
forall/fML1/languagelevel where{pop languagelevel}{1}ifelse 2 lt def/fMCl fML1{
/statusdict where{pop statusdict/processcolors known{statusdict/processcolors
get exec 1 gt}{F}ifelse}{F}ifelse}{T}ifelse def/FmBD{bind def}bind def/fmBx{[
exch{dup/FrameMacDict eq{pop FrameMacDict}{dup type dup/arraytype eq exch
/packedarraytype eq or{dup xcheck{fmBi}if}if}ifelse}forall]cvx}FmBD/fmBi{bind
fmBx}FmBD/fmPU{userdict 3 1 roll fmBi put}bind def/T true def/F false def
userdict/fMSuccessfull F put userdict/fMSi F put userdict/fM7 known not{
userdict/fM7 0 put}if/fmXD{exch def}FmBD/FmG/gsave load def/FmR/grestore load
def/fm_l/grestoreall load def/fm_v/save load def/fm_g/setgray load def/fm_r
/setrgbcolor load def/fm_h/sethsbcolor load def/fm_f/fill load def/fm_e/eofill
load def/fm_t/stroke load def/fm_m/imagemask load def/fm_i/image load def/fm_s
/show load def/fm_a/ashow load def/fm_w/widthshow load def/fm_y/awidthshow load
def/fm_k/kshow load def/fMat matrix def/fMa2 matrix def/fmSM{fMat currentmatrix
pop}FmBD/fmRM{fMat setmatrix}FmBD/FmRF{currentpoint 2 copy translate 4 2 roll{
-1 1 scale}if rotate neg exch neg exch translate}FmBD/fmax{2 copy lt{exch}if
pop}FmBD/fmin{2 copy gt{exch}if pop}FmBD systemdict/pdfmark known{/FmPD/pdfmark
load def/FmPT/fm_s load def}{/FmPD/cleartomark load def/FmPT/pop load def}
ifelse/FmDC{transform fMat defaultmatrix itransform cvi exch cvi exch}FmBD/fmgS
32 array def/fMgt 0 def/fMtp 0 def/fmSG{fmgS fMgt get dup null eq{pop fmgS fMgt
10 dict dup 4 1 roll put}if 3 1 roll put}FmBD/fmGG{fMgt -1 -1{fmgS exch get dup
null ne{2 copy exch known{2 copy exch get/_notdef ne{exch get dup exit}if}if}if
pop}for pop}FmBD/gsave{FrameMacDict begin FmG/fMgt fMgt 1 add def fmgS fMgt get
dup null eq{pop}{dup dup{pop/_notdef put dup}forall pop pop}ifelse end}fmPU
/grestore{FrameMacDict begin fMgt fMtp gt{/fMgt fMgt 1 sub def}if FmR null fmCN
end}fmPU/grestoreall{FrameMacDict begin/fMgt fMtp def fm_l null fmCN end}fmPU
/save{FrameMacDict/fm_v get exec FrameMacDict begin/fMgt fMgt 1 add def fmgS
fMgt get dup null eq{pop}{dup dup{pop/_notdef put dup}forall pop pop}ifelse
/fMtp fMgt def end}fmPU/fMND F def/fMCC null fmSG/fMOP F fmSG/fMKO F fmSG/fmRY{
1 exch sub 3 1 roll 1 exch sub 3 1 roll 1 exch sub 3 1 roll 3 copy 2 copy le{
pop}{exch pop}ifelse 2 copy le{pop}{exch pop}ifelse dup dup dup 6 1 roll 4 1
roll 7 1 roll sub 6 1 roll sub 5 1 roll sub 4 1 roll}fmSG/fmkn{2 copy known{get
T}{pop pop false}ifelse}FmBD/fmfp{exch currentfont dup/FontMatrix get exch
/FontInfo fmkn{T}{currentfont/df fmkn{dup/FontInfo fmkn{3 1 roll/FontMatrix get
mtx concatmatrix exch T}{pop pop pop F}ifelse}{pop pop F}ifelse}ifelse{3 -1
roll fmkn{exch 0 3 1 roll dtransform neg exch pop exch pop}{pop exec}ifelse}{
exec}ifelse}FmBD/fmdl{3 index 16 and 0 ne{FmG currentlinewidth 2. div dup
rmoveto currentpoint newpath moveto 2 index 0 rlineto fm_t FmR}if 3 index 24
and 0 ne{FmG currentrgbcolor dup 4 1 roll eq 3 1 roll eq and{1 currentgray sub
setgray}{1 setgray}ifelse 2 index 0 rlineto fm_t FmR FmG 2 index 0 rlineto
strokepath .24 setlinewidth fm_t FmR}{2 index 0 rlineto fm_t 0 0 moveto}ifelse}
FmBD/FmUl{FmG/fM2 fmXD currentpoint/UnderlineThickness{fM2 15 div}fmfp abs dup
setlinewidth/fM1 fmXD 4 index 1 and 0 ne{newpath 2 copy moveto 0
/UnderlinePosition{fM2 10 div neg}fmfp neg rmoveto fmdl}if 4 index 2 and 0 ne{
newpath 2 copy moveto 0/XHeight{FmG newpath 0 0 moveto(x)F charpath flattenpath
pathbbox 4 -1 roll pop pop pop FmR dup 0 eq{pop fM2 2. mul 3. div neg}if}fmfp
2. div rmoveto fmdl}if 4 index 4 and 0 ne{newpath 2 copy moveto 0/CapHeight{FmG
newpath 0 0 moveto(H)F charpath flattenpath pathbbox 4 -1 roll pop pop pop FmR
dup 0 eq{pop fM2 3. mul 4. div neg}if}fmfp fM1 sub rmoveto fmdl}if pop pop pop
pop pop FmR}FmBD/FmTx{/fM3 fmXD/fM2 fmXD/fM1 fmXD 0 32 fM1 fM3 stringwidth pop
fM2 sub fM3 length div sub 0 fM3 fm_y}FmBD/fMN 0 def/fMC 1 def/fMM 2 def/fMY 3
def/fMK 4 def/fMS 5 def/fMNg 0 currenttransfer exec .5 gt def/fMCM fMN def/fMJK
0 def/fMJY 0 def/fMJM 0 def/fMJC 0 def/fMJR 1 def/fMJG 1 def/fMJB 1 def/fMCG 1
def/fMPt null def/fMCK[0 0 0 1 0 0 0]def/fmCH{fML1{14 dict dup begin fMCl{
/HalftoneType 2 def currentcolorscreen[/GraySpotFunction/GrayAngle
/GrayFrequency/BlueSpotFunction/BlueAngle/BlueFrequency/GreenSpotFunction
/GreenAngle/GreenFrequency/RedSpotFunction/RedAngle/RedFrequency]{exch def}
forall}{/HalftoneType 1 def currentscreen[/SpotFunction/Angle/Frequency]{exch
def}forall}ifelse statusdict/checkscreen known{statusdict/accuratescreens get
exec}{F}ifelse/AccurateScreens exch def end}{currenthalftone}ifelse}FmBD/fmSH{
fML1{begin statusdict/checkscreen known{currentdict/AccurateScreens known{
AccurateScreens}{F}ifelse statusdict/setaccuratescreens get exec}if
HalftoneType 1 eq{Frequency Angle currentdict/SpotFunction get setscreen}{
HalftoneType 2 eq{fMCl{RedFrequency RedAngle currentdict/RedSpotFunction get
GreenFrequency GreenAngle currentdict/GreenSpotFunction get BlueFrequency
BlueAngle currentdict/BlueSpotFunction get GrayFrequency GrayAngle currentdict
/GraySpotFunction get setcolorscreen}{GrayFrequency GrayAngle currentdict
/GraySpotFunction get setscreen}ifelse}if}ifelse end}{sethalftone}ifelse}FmBD
/FmCS{14 dict begin/HalftoneType 2 def/AccurateScreens exch def
/GraySpotFunction exch def/GrayAngle exch def/GrayFrequency exch def
/BlueSpotFunction exch def/BlueAngle exch def/BlueFrequency exch def
/GreenSpotFunction exch def/GreenAngle exch def/GreenFrequency exch def
/RedSpotFunction exch def/RedAngle exch def/RedFrequency exch def currentdict
dup end/fMPH exch def fmSH}FmBD/FmSS{5 dict begin/HalftoneType 1 def
/AccurateScreens exch def/SpotFunction exch def/Angle exch def/Frequency exch
def currentdict dup end/fMPH exch def fmSH}FmBD/fMPH fmCH def/fmcp{/FmPr2 exch
cvlit def/FmPr1 exch cvlit def/FmPrn FmPr1 length FmPr2 length add array def
FmPrn 0 FmPr1 putinterval FmPrn FmPr1 length FmPr2 putinterval FmPrn cvx}FmBD
/fmEp{sub dup 0 lt{neg}if .001 le}FmBD/fmQC{2 copy 0 get exch 0 get fmEp{2 copy
1 get exch 1 get fmEp{2 copy 2 get exch 2 get fmEp{3 get exch 3 get fmEp}{pop
pop F}ifelse}{pop pop F}ifelse}{pop pop F}ifelse}FmBD/fmQR{2 copy 4 get exch 0
get fmEp{2 copy 5 get exch 1 get fmEp{6 get exch 2 get fmEp}{pop pop F}ifelse}{
pop pop F}ifelse}FmBD/FmSC{/fMCM fmXD/fMJB fmXD/fMJG fmXD/fMJR fmXD/fMJK fmXD
/fMJY fmXD/fMJM fmXD/fMJC fmXD fmCC}FmBD/FmSP{/fMCM fmXD fmCC}FmBD
/FrameSetSepColors{FrameMacDict begin[exch 1 add 1 roll]/fMSC exch def end}fmBi
def/fmLC{fMSC{exch dup 3 -1 roll fmQC{pop T exit}if}forall dup T ne{pop F}if}
FmBD/fmLR{fMSC{exch dup 3 -1 roll fmQR{pop T exit}if}forall dup T ne{pop F}if}
FmBD/fmLM{fMSC{exch dup 3 -1 roll dup 7 get 3 -1 roll eq{exch pop T exit}{pop}
ifelse}forall dup T ne{pop F}if}FmBD/fmCN{fMND F fMCM fMN ne{/fMOP fmGG{/fMKO
fmGG{pop T}if}if}if dup/fMND exch def{pop pop}{exch dup null ne{exch pop dup
type dup/integertype eq exch/realtype eq or{fm_g}{setcolor}ifelse}{pop{1 fm_g}
if}ifelse}ifelse}FmBD/fill{FrameMacDict begin fMND{newpath}{fm_f}ifelse end}
fmPU/eofill{FrameMacDict begin fMND{newpath}{fm_e}ifelse end}fmPU/stroke{
FrameMacDict begin fMND{newpath}{fm_t}ifelse end}fmPU/imagemask{FrameMacDict
begin fMND{FmG nulldevive fm_m FmR}{fm_m}ifelse end}fmPU/show{FrameMacDict
begin fMND{stringwidth rmoveto}{fm_s}ifelse end}fmPU/fmNX{load fMND{FmG fMa2
currentmatrix end nulldevice setmatrix exec currentpoint FrameMacDict/FmR get
exec moveto}{end exec}ifelse}fmBi def/ashow{FrameMacDict begin/fm_a fmNX}fmPU
/widthshow{FrameMacDict begin/fm_w fmNX}fmPU/awidthshow{FrameMacDict begin/fm_y
fmNX}fmPU/kshow{FrameMacDict begin/RealKshow fmNX}fmPU/image{FrameMacDict begin
fMCM fMN ne fMCM fMK ne and{FmG/fMOP fmGG{nulldevice}{fMNg{{pop 0}}{{pop 1}}
ifelse settransfer}ifelse/fm_i load end exec FmR}{/fm_i load end exec}ifelse}
fmPU/fMGM T def/fMBM F def/setcustomcolor where{pop}{/findcmykcustomcolor{0 0 0
4 -1 roll 8 array astore}fmPU/findrgbcustomcolor{FrameMacDict begin 4 1 roll 3
copy/fmRY fmGG exec 8 4 roll 4 -1 roll 8 array astore end}fmPU
/findgraycustomcolor{0 0 0 exch 1 exch sub exch findcmykcustomcolor}fmPU
/findhsbcustomcolor{FrameMacDict begin 4 1 roll gsave fm_h currentrgbcolor
grestore 4 -1 roll findrgbcustomcolor end}fmPU/setcustomcolor{FrameMacDict
begin dup type dup/integertype eq exch/realtype eq or not{1.0}if exch dup/fMCC
exch fmSG/fMBM F def fMCM fMN eq{0 4 getinterval aload pop 4{4 index mul 4 1
roll}repeat fmSK pop}{dup{7 get}stopped{pop 4 get}if fmLM{exch pop 0 4
getinterval aload pop fMCM fMS eq{fMJK eq exch fMJY eq and exch fMJM eq and
exch fMJC eq and{1 exch sub F}{pop 1 T}ifelse}{5{pop}repeat 1 T}ifelse}{fMCM
fMK eq{3 get F}{fMCM fMY eq{2 get F}{fMCM fMM eq{1 get F}{fMCM fMC eq{0 get F}{
pop 0 T}ifelse}ifelse}ifelse}ifelse 3 1 roll mul 1 exch sub exch}ifelse/fMKO
exch fmSG fmCN}ifelse end}fmPU/setoverprint{FrameMacDict begin/fMOP exch fmSG
null fmCN end}fmPU/currentoverprint{FrameMacDict begin/fMOP fmGG end}fmPU}
ifelse/fmCC{fMCM fMN eq{fMGM fML1 or not{[/Pattern[/DeviceCMYK]]setcolorspace
fMCK 0 4 getinterval aload pop fMPt setcolor}{fMCK 3 get 1.0 ge{fMCG fm_g}{fMCl
fMGM and{0 1 3{fMCK exch get 1 fMCG sub mul}for fmSK}{4 1 6{fMCK exch get fMGM{
1 exch sub 1 fMCG sub mul 1 exch sub}{1.0 lt{fMCG}{1}ifelse}ifelse}for fm_r}
ifelse}ifelse}ifelse null/fMKO F fmSG}{fMBM{fMCG F}{fMCK 0 4 getinterval aload
fmLC{fMCM fMS eq{fMJK eq exch fMJY eq and exch fMJM eq and exch fMJC eq and{
fMCG F}{1 T}ifelse}{pop pop pop pop 1 T}ifelse}{fMCM fMK eq{fMCG 1.0 exch sub
mul 1.0 exch sub 4 1 roll pop pop pop F}{fMCM fMY eq{pop fMCG 1.0 exch sub mul
1.0 exch sub 3 1 roll pop pop F}{fMCM fMM eq{pop pop fMCG 1.0 exch sub mul 1.0
exch sub exch pop F}{fMCM fMC eq{pop pop pop fMCG 1.0 exch sub mul 1.0 exch sub
F}{pop pop pop pop 1 T}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse/fMKO exch fmSG
fMGM fML1 or not{[/Pattern[/DeviceGray]]setcolorspace fMPt}{fMGM not fML1 and{
dup 1 lt{pop fMCG}if}if}ifelse}ifelse fmCN}FmBD/setgray{FrameMacDict begin fMCM
fMN eq{F}{fMCM fMK eq{F}{fMCM fMS eq fMJR 0 eq and fMJG 0 eq and fMJB 0 eq and{
F}{pop 1 T}ifelse}ifelse}ifelse/fMKO exch fmSG fmCN end}fmPU/setrgbcolor{
FrameMacDict begin/fMBM F def fMCM fMN eq{fm_r}{3 copy[4 1 roll]fmLR{fMCM fMS
eq{fMJB eq exch fMJG eq and exch fMJR eq and{0 F}{1 T}ifelse}{pop pop pop 1 T}
ifelse}{/fmRY fmGG exec fMCM fMK eq{1.0 exch sub 4 1 roll pop pop pop F}{fMCM
fMY eq{pop 1.0 exch sub 3 1 roll pop pop F}{fMCM fMM eq{pop pop 1.0 exch sub
exch pop F}{fMCM fMC eq{pop pop pop 1.0 exch sub F}{pop pop pop pop 1 T}ifelse}
ifelse}ifelse}ifelse}ifelse/fMKO exch fmSG fmCN}ifelse end}fmPU/sethsbcolor{
FrameMacDict begin fMCM fMN eq{fm_h}{fm_h currentrgbcolor setrgbcolor}ifelse
end}fmPU/setcmykcolor where{pop/fmSK/setcmykcolor load def}{/fmSK{4 1 roll 3{3
index add 0 fmax 1 fmin 1 exch sub 3 1 roll}repeat fm_r pop}FmBD}ifelse
/currentcmykcolor where{pop}{/currentcmykcolor{FrameMacDict begin
currentrgbcolor/fmRY fmGG exec end}fmPU}ifelse/setcmykcolor{FrameMacDict begin
/fMBM F def fMCM fMN eq{fmSK}{4 copy[5 1 roll]fmLC{fMCM fMS eq{fMJK eq exch
fMJY eq and exch fMJM eq and exch fMJC eq and{0 F}{1 T}ifelse}{pop pop pop pop
1 T}ifelse}{fMCM fMK eq{1.0 exch sub 4 1 roll pop pop pop F}{fMCM fMY eq{pop
1.0 exch sub 3 1 roll pop pop F}{fMCM fMM eq{pop pop 1.0 exch sub exch pop F}{
fMCM fMC eq{pop pop pop 1.0 exch sub F}{pop pop pop pop 1 T}ifelse}ifelse}
ifelse}ifelse}ifelse/fMKO exch fmSG fmCN}ifelse end}fmPU/fMFl[0 .1 .3 .5 .7 .9
.97 1<0f1e3c78f0e1c387><0f87c3e1f0783c1e><cccccccccccccccc><ffff0000ffff0000><
8142241818244281><0102040810204080><8040201008040201>]def fML1{/patScreenDict 7
dict dup begin<0f1e3c78f0e1c387>[45{pop}{exch pop}.5 2 sqrt]FmBD<0f87c3e1f0783c
1e>[135{pop}{exch pop}.5 2 sqrt]FmBD<cccccccccccccccc>[0{pop}dup .5 2]FmBD<ffff
0000ffff0000>[90{pop}dup .5 2]FmBD<8142241818244281>[45{2 copy lt{exch}if pop}
dup .75 2 sqrt]FmBD<0102040810204080>[45{pop}{exch pop}.875 2 sqrt]FmBD<804020
1008040201>[135{pop}{exch pop}.875 2 sqrt]FmBD end def}{/fMPP 5 dict dup begin<
0f87c3e1f0783c1e>{3 setlinewidth -1 -1 moveto 9 9 lineto fm_t 4 -4 moveto 12 4
lineto fm_t -4 4 moveto 4 12 lineto fm_t}FmBD<0f1e3c78f0e1c387>{3 setlinewidth
-1 9 moveto 9 -1 lineto fm_t -4 4 moveto 4 -4 lineto fm_t 4 12 moveto 12 4
lineto fm_t}FmBD<8142241818244281>{1 setlinewidth -1 9 moveto 9 -1 lineto fm_t
-1 -1 moveto 9 9 lineto fm_t}FmBD<8040201008040201>{1 setlinewidth -1 -1 moveto
9 9 lineto fm_t 4 -4 moveto 12 4 lineto fm_t -4 4 moveto 4 12 lineto fm_t}FmBD<
0102040810204080>{1 setlinewidth -1 9 moveto 9 -1 lineto fm_t -4 4 moveto 4 -4
lineto fm_t 4 12 moveto 12 4 lineto fm_t}FmBD end def/fMPD 15 dict dup begin
/PatternType 1 def/PaintType 2 def/TilingType 3 def/BBox[0 0 8 8]def/XStep 8
def/YStep 8 def/PaintProc{begin fMPP fmBS known{fMPP fmBS get exec}{8 8 T[1 0 0
-1 0 8]fmBS fm_m}ifelse end}FmBD end def}ifelse/fMdp 72 0 fMat defaultmatrix
dtransform dup mul exch dup mul add sqrt def/freq fMdp dup 72 div round dup 0
eq{pop 1}if 8 mul div def/sangle 1 0 fMat defaultmatrix dtransform exch atan
def sangle fMa2 rotate fMat fMa2 concatmatrix dup 0 get/sflipx exch def 3 get
/sflipy exch def fML1{/fmgF{fMa2 exch get mul 0 lt{-1}{1}ifelse}FmBD}if/fmPM
fML1{{dup patScreenDict exch known{patScreenDict exch get aload pop freq mul 5
2 roll fMa2 currentmatrix 1 get 0 ne{3 -1 roll 90 add 3 1 roll sflipx 1 fmgF
sflipy 2 fmgF mul}{sflipx 0 fmgF sflipy 3 fmgF neg mul}ifelse 0 lt{exch pop}{
pop}ifelse fMNg{{neg}fmcp}if bind systemdict/setscreen get exec}{/fmBS fmXD
/fM1B 0 def/fM0B 0 def freq 0 fMa2 currentmatrix 1 get 0 ne{90 add/pflipx
sflipx 1 fmgF def/pflipy sflipy 2 fmgF def}{/pflipx sflipx 0 fmgF def/pflipy
sflipy 3 fmgF neg def}ifelse{pflipy mul/yy fmXD pflipx mul/xx fmXD/xindex xx 1
add 2 div 8 mul cvi def/yindex yy 1 add 2 div 8 mul cvi def fmBS yindex xindex
8 idiv add get 1 7 xindex 8 mod sub bitshift and 0 ne fMNg{not}if{/fM1B fM1B 1
add def 1}{/fM0B fM0B 1 add def 0}ifelse}setscreen fM0B fM0B fM1B add div fMNg{
1.0 exch sub}if}ifelse/fMCG exch def/fMGM F def fmCC}}{/fMPC 8 dict def{dup
fMPC exch known{fMPC exch get}{dup fMPD/fmBS 3 -1 roll put fMPD matrix
makepattern dup fMPC 4 -1 roll 3 -1 roll put}ifelse/fMCG 0 def/fMPt exch def
/fMGM F def fmCC}}ifelse FmBD/fmgr{fMGM not{/fMGM T def fML1{fMPH fmSH}if}if
/fMCG exch def fmCC}FmBD/FmP{fMFl exch get dup type/stringtype eq{fmPM}{fmgr}
ifelse}FmBD/FmK{fMCK astore pop/fMBM F def fmCC}FmBD/FmFB{0 0 0 1 0 0 0 fMCK
astore pop/fMCG 0 def/fMBM T def fmCC}FmBD/fMOx matrix def fMOx currentmatrix
pop/FmSO{/FmOs save def fmSM fMOx setmatrix}FmBD/FmIO{fmRM}FmBD/FmEO{FmOs
restore}FmBD/fm3R[{.3 mul add 1}bind{.59 mul add 2}bind{.11 mul add round cvi
fMs exch fMi exch put/fMi fMi 1 add def 0 0}bind]def/fm31{/fMi 0 def 0 exch 0
exch{exch fm3R exch get exec}forall pop pop fMs}FmBD fML1{/Fmi{save userdict
/fM7 3 -1 roll put/fM9 F def{{dup length 1 sub/fMGL fmXD/fMBC fmXD/fMNC fmXD
/fMRC fmXD/fMGC fMGL 1 add array def/setcolortransfer where{pop
currentcolortransfer/gryt fmXD/blut fmXD/grnt fmXD/redt fmXD 0 1 fMGL{/fMIx
fmXD/fMUC 1 fMRC fMIx get sub def/fMUM 1 fMNC fMIx get sub def/fMUY 1 fMBC fMIx
get sub def/fMk fMUC fMUM fmin fMUY fmin def/FmU fMk currentundercolorremoval
exec def fMRC fMIx 1 0 fMUC FmU sub fmax sub redt exec put fMNC fMIx 1 0 fMUM
FmU sub fmax sub grnt exec put fMBC fMIx 1 0 fMUY FmU sub fmax sub blut exec
put fMGC fMIx 1 fMk currentblackgeneration exec sub gryt exec put}for{fMGL mul
cvi fMRC exch get}{fMGL mul cvi fMNC exch get}{fMGL mul cvi fMBC exch get}{fMGL
mul cvi fMGC exch get}setcolortransfer{pop 0}setundercolorremoval{}
setblackgeneration/fM9 T def}{0 1 fMGL{fMGC exch dup dup fMRC exch get .3 mul
exch dup fMNC exch get .59 mul exch fMBC exch get .11 mul add add put}for{fMGL
mul cvi fMGC exch get}currenttransfer fmcp settransfer}ifelse}{dup length 1 sub
/fMGL fmXD/fMGC fmXD{fMGL mul cvi fMGC exch get}currenttransfer fmcp
settransfer}ifelse}{{{1 exch sub}currenttransfer fmcp settransfer}if}ifelse/fM5
fmXD/fM8 fmXD/fM6 fmXD/fM3 fmXD/fM4 fmXD translate rotate scale{-1 1 scale}if
/fM18 fM8 string def fM4 fM3 fM6[fM4 0 0 fM3 fM4 2 div fM3 2 div]{currentfile
fM18 fM5{readstring}{readhexstring}ifelse pop}fM9{{fM18}{fM18}T 3 colorimage}{
fm_i}ifelse fM7 restore}FmBD}{/Fmi{save userdict/fM7 3 -1 roll put/fM9 F def{{
dup length 1 sub/fMGL fmXD/fMBC fmXD/fMNC fmXD/fMRC fmXD[/Indexed/DeviceRGB
fMGL{dup fMRC exch get exch dup fMNC exch get exch fMBC exch get}]setcolorspace
}{dup length 1 sub/fMGL fmXD/fMGC fmXD[/Indexed/DeviceGray fMGL{fMGC exch get}]
setcolorspace}ifelse}{1 4 index bitshift 1 sub/fMGL fmXD[/Indexed/DeviceGray
fMGL 5 -1 roll{{fMGL div 1 exch sub}}{{fMGL div}}ifelse]setcolorspace}ifelse
/fM5 fmXD/fM8 fmXD/fM6 fmXD/fM3 fmXD/fM4 fmXD translate rotate scale{-1 1 scale
}if/fM18 fM8 string def 7 dict begin/ImageType 1 def/Width fM4 def/Height fM3
def/ImageMatrix[fM4 0 0 fM3 fM4 2 div fM3 2 div]def/DataSource{currentfile fM18
fM5{readstring}{readhexstring}ifelse pop}def/BitsPerComponent fM6 def/Decode[0
fMGL]def currentdict end fm_i fM7 restore}FmBD}ifelse/Fmci{save userdict/fM7 3
-1 roll put/fM5 fmXD/fM8 fmXD/fM6 fmXD/fM3 fmXD/fM4 fmXD/fM18 fM8 string def
/fMs fM18 0 fM18 length 3 idiv getinterval def translate rotate scale{-1 1
scale}if fM4 fM3 fM6[fM4 0 0 fM3 fM4 2 div fM3 2 div]fMCl{{currentfile fM18 fM5
{readstring}{readhexstring}ifelse pop}F 3 colorimage}{{currentfile fM18 fM5{
readstring}{readhexstring}ifelse pop fm31}fm_i}ifelse fM7 restore}FmBD fML1{
/fmAn{transform round .5 sub exch round .5 sub exch itransform}FmBD/fmAc{
transform round 1.5 sub exch round 1.5 sub exch itransform}FmBD/fmDn{dtransform
round exch round exch idtransform}FmBD/fmLn{0 dtransform exch cvi 2 idiv 2 mul
.1 add exch idtransform pop}FmBD/FmCv{fmDn 6 2 roll fmDn 6 2 roll fmDn 6 2 roll
rcurveto}FmBD}{T setstrokeadjust/fmAn{}FmBD/fmAc{}FmBD/fmDn{}FmBD/fmLn{}FmBD
/FmCv{rcurveto}FmBD}ifelse/FmM{fmAn moveto}FmBD/M{moveto}FmBD/N{0 rmoveto}FmBD
/S{fm_s}FmBD/A{0 exch fm_a}FmBD/W{0 exch 32 exch fm_w}FmBD/X{0 exch 0 32 5 2
roll fm_y}FmBD/fmQP{fML1 fMGM or not{FmG dup 1 fm_g exec FmR}if exec}FmBD/FmB{
newpath fmAn moveto}FmBD/FmL{rlineto}FmBD/FmAL{fmAn lineto}FmBD/FmSo{fmLn
setlinewidth setlinecap{fm_t}fmQP 0 0 moveto}FmBD/FmS{fmLn setlinewidth
closepath{fm_t}fmQP 0 0 moveto}FmBD/FmDS{fmLn setlinewidth setlinecap{closepath
}if setdash{fm_t}fmQP[]0 setdash 0 0 moveto}FmBD/FmFl{FmG{fm_e}fmQP FmR}FmBD
/fmq{fmDn 4 2 roll fmAn newpath moveto 1 index 0 rlineto 0 exch rlineto neg 0
rlineto closepath}FmBD/FmqP{fmq fmLn setlinewidth{fm_t}fmQP 0 0 moveto}FmBD
/FmqF{fmq FmG{fm_f}fmQP FmR}FmBD/FmKp{{currentpoint}stopped{F 5 1 roll}{T 7 3
roll}ifelse fmDn 4 2 roll fmAn newpath moveto 1 index 0 rlineto 0 exch rlineto
neg 0 rlineto closepath clip{moveto}{newpath}ifelse}FmBD/FmKb{{currentpoint}
stopped}FmBD/FmKe{clip{newpath}{moveto}ifelse}FmBD/FmAF{FmG newpath fmAn
translate not{0.0 0.0 moveto}if rotate fmDn scale 0.0 0.0 1.0 5 3 roll arc
closepath{fm_f}fmQP FmR}FmBD/FmAP{FmG{setdash}if fmLn setlinewidth setlinecap
fmSM newpath 2 index 2 div add exch 3 index 2 div sub exch fmAn 2 index 2 div
sub exch 3 index 2 div add exch translate rotate scale 0.0 0.0 1.0 5 3 roll
exch arcn{closepath}if fmRM{fm_t}fmQP FmR}FmBD/FmST{FmG fmAn translate .3 fmLn
setlinewidth 0 setlinecap 0 setlinejoin newpath 1 fm_g 0 0 10 0 360 arc fm_f 0
fm_g 0 0 10 0 360 arc fm_t 36{1 0 moveto 0 0 10 -2.5 2.5 arc fm_f 10 rotate}
repeat FmR}FmBD/FmSL{FmG fmAn translate .25 fmLn setlinewidth 0 setlinecap 0
setlinejoin newpath 1 fm_g 0 0 10 0 360 arc fm_f 0 fm_g 10 .5 fmLn neg .1{0 0 3
-1 roll 0 360 arc fm_t}for FmR}FmBD/FrameEr where{pop}{userdict/FrameEr(\000)
put}ifelse/fMSJ 100 string def/fmXC{userdict/fMSi 2 index put end{
countdictstack userdict begin/showpage{}def/FmDictStackDepth exch def count
/FmStackDepth exch def}if userdict/fMSuccessfull false put currentfile cvx
stopped pop fMSuccessfull not{/$brkpage where{stop}if systemdict/clear get exec
userdict/FrameEr get 0 1 put FrameMacDict begin FmG systemdict/initmatrix get
exec 0 systemdict/setgray get exec clippath{pathbbox}stopped{100 100 512 692}if
exch pop add 2. div newpath moveto(Courier-BoldOblique)findfont 18 scalefont
setfont FrameEr1 fm_s( \()fm_s $error begin errorname 20 string cvs fm_s(, )
fm_s/command load 128 string cvs fm_s end(\))fm_s FrameEr2 print flush
FrameMacDict/fMSJ get{dup currentfile exch{readline}stopped{pop exch pop T}if
not{exit}if(EndFrame4Picture)eq{exit}if}loop grestore end}if userdict
/fMSuccessfull false put FrameMacDict/fmIR get exec}fmBi def/FmEP{save userdict
/fM7 3 -1 roll put setoverprint{fMN FmSP}if[/fMef/fMet/fMeh/fMew/fMey/fMex/fMei
/fMej/fMek/fMel]{fmXD}forall fMex fMey translate fMet rotate fMew fMeh scale
fMef{-1 1 scale}if 1 fMej fMel sub div 1 fMek fMei sub div scale fMej fMel add
2 div neg fMei fMek add 2 div neg translate newpath fMel fMek moveto fMel fMei
lineto fMej fMei lineto fMej fMek lineto closepath clip newpath T fmXC}FmBD
/FmPI{newpath 0 0 moveto F fmXC}FmBD/FmPc{save userdict/fM7 3 -1 roll put
newpath 3 index neg 3 index neg translate 1 -1 scale 0.0 0.0 moveto T fmXC}FmBD
/fmIR{fMSi{fM7 type/savetype eq{end/FmDictStackDepth where{pop countdictstack
FmDictStackDepth sub dup 0 gt{{end}repeat}{pop}ifelse count FmStackDepth sub
dup 0 gt{{pop}repeat}{pop}ifelse}if fM7 restore}if}if FrameMacDict begin}FmBD
userdict/EndFrame4Picture{userdict/fMSi 3 -1 roll put userdict/fMSuccessfull
true put stop}fmBi put/alphaimage where{pop}{/alphaimage{1 ne{limitcheck}if not
{limitcheck}if pop image}fmPU}ifelse/fmDE{systemdict/initgraphics get exec
clippath{pathbbox}stopped{100 100 512 692}if exch pop add 2. div newpath moveto
(Courier-BoldOblique)findfont 18 scalefont setfont currentpoint 2 copy FrameEr3
fm_s 20 sub 2 copy moveto FrameEr4 fm_s 20 sub 2 copy moveto(\()fm_s statusdict
/jobname get fm_s(\))fm_s 20 sub moveto FrameEr5 fm_s showpage}FmBD/cd where{
dup/cd get/FmRealcd fmXD/cd{FrameMacDict begin FrameEr 0 get 0 ne{fmDE}if
/FmRealcd load end exec}fmBi put}{/endp where{dup/endp get/fMRE fmXD/endp{
FrameMacDict/fMRE get exec FrameEr 0 get 0 ne{FrameMacDict begin currentfile
fMSJ{readline}stopped{pop exch pop true}if pop(%%Trailer)eq{fmDE}if end}if}fmBi
put}if}ifelse systemdict/setpacking known{fMSP setpacking}if end
%%EndProcSet
%%FRMSetup
FrameMacDict begin
/FrameEr1(PostScript error)def
/FrameEr2(A PostScript error occurred. FrameMaker is attempting recovery.)def
/FrameEr3(FrameMaker has detected one or more)def
/FrameEr4(PostScript errors in this document.)def
/FrameEr5(Please check your output.)def
end
%%FRMEndSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(Bob Jacobsen; page: 1 of 4)setjob
%%EndPageSetup
gS 0 0 576 776 rC
1 G
-18 -8 612 792 rF
0 G
0 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
end
0 0 :M
f0_10 sf
( )S
2 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
54 34.667 M (BaBar Reconstruction Note 3)S
end
3 0 :M
f1_18 sf
( )S
7 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
76.151 76 M (Access to BaBar)S
-0.321 N ( Event Data fr)S
-0.321 N (om Reconstruction Code)S
end
7 0 :M
f0_12 sf
( )S
10 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
186.001 108 M (Bob Jacobsen \(Bob_Jacobsen@LBL.Gov\))S
253.334 126 M (Sept. 13, 1995)S
end
10 0 :M
f1_14 sf
( )S
13 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
54 157.333 M (1)S
29 N (Intr)S
-0.25 N (oduction)S
end
14 0 :M
f0_12 sf
( )S
17 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
90 177 M 0.858(This note documents the method that reconstruction code will use to access data associ-)W
90 191 M 0.062(ated with a particular event. It is not intended to document the underlying implementation)W
90 205 M (of this method.)S
104.4 223 M 0.031(All BaBar reconstruction code is contained within a module. Each module is passed an)W
90 237 M (ar)S
-0.214 N 0.206(gument of type )W
end
17 0 :M
f2_10 sf
( )S
23 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
175.371 237 M 0 0 54(AbsEvent*)FmTx
end
23 0 :M
f0_12 sf
( )S
26 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
229.371 237 M 0.206( upon start-up. By convention, we refer to this object pointer)W
90 251 M -0.115(as \322)W
end
26 0 :M
f2_10 sf
( )S
32 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
108.205 251 M 0 0 12(ev)FmTx
end
32 0 :M
f0_12 sf
( )S
35 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
120.205 251 M -0.115(\323. In the following sections, we describe how to use this object to obtain lists of per)W
-0.237 N (-)S
90 265 M -0.253(manent data items, how to use those lists and the objects on them, and how to use a facility)W
90 279 M (for exchanging temporary data items.)S
end
35 0 :M
f1_14 sf
( )S
38 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
54 310.333 M (2)S
29 N (The )S
-0.769 N (AbsEvent class)S
end
38 0 :M
f0_12 sf
( )S
41 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
104.4 330 M 2.905(AbsEvent contains member functions for obtaining pointers to permanent lists of)W
90 344 M -0.163(objects of various types. )W
-0.214 N -0.163(These lists are permanent in the sense that the I/O system is capa-)W
90 358 M 0.89(ble of reading and writing them, so that the modules making up the reconstruction code)W
90 372 M 0.279(can be arbitrarily divided into jobs that can be run at various times, with the lists residing)W
90 386 M 0.942(on mass storage between jobs. For the )W
-0.659 N 0.942(AbsEvent class to have a permanent list of some)W
90 400 M 0.366(type, there must be at least one I/O package capable of reading and writing the items and)W
90 414 M (the item type must be edited into the )S
-0.659 N (AbsEvent class declaration.)S
104.4 432 M 0.006(For example, a list containing all available objects of the )W
-0.659 N 0.006(AtcDigi class can be obtained)W
90 446 M (with the )S
end
41 0 :M
f2_10 sf
( )S
47 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
131.991 446 M 0 0 102(getAtcDigiAList\(\))FmTx
end
47 0 :M
f0_12 sf
( )S
50 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
233.991 446 M ( function:)S
end
50 0 :M
f2_10 sf
( )S
56 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
140.4 462.667 M 0 0 288(HepAList<AtcDigi>* list = ev->getAtcDigiAList\(\);)FmTx
end
56 0 :M
f0_12 sf
( )S
59 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
90 480 M 0.157(Once the list pointer has been obtained, objects of the appropriate type can be added to or)W
90 494 M (deleted from it. )S
104.4 512 M (W)S
-0.958 N 0.47(e expect that the )W
-0.659 N 0.47(AbsEvent class will also provide a set of temporary lists which are)W
90 526 M 1.56(not intended for I/O. )W
-0.214 N 1.56(These can be used for communicating temporary results between)W
90 540 M (closely coupled modules. )S
104.4 558 M 1.672(The )W
-0.659 N 1.672(AbsEvent class declaration is contained within the )W
-0.659 N 1.672(AbsEvent package. It is not)W
90 572 M 2.418(generally necessary to #include any header \336)W
2.418(les to reference it, as it will usually be)W
90 586 M (included by other \336)S
(les when declaring a BaBar software module.)S
end
59 0 :M
f1_14 sf
( )S
62 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
54 617.333 M (3)S
29 N (Use of permanent lists)S
end
63 0 :M
f0_12 sf
( )S
66 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
104.4 637 M (\245)S
17.402 N 1.749(An )W
-0.659 N 1.749(AbsEvent object owns the lists that it maintains. )W
-0.214 N 1.749(Therefore, a module must)W
126 651 M (never delete a list that it has obtained from an )S
-0.659 N (AbsEvent. )S
104.4 669 M (\245)S
17.402 N (A)S
-0.659 N 0.647( module may make a copy of a list obtained from an )W
-0.659 N 0.647(AbsEvent for its own pur)W
-0.237 N (-)S
126 683 M 1.043(poses. Note that this copy is owned by)W
-0.779 N 1.043(, and must be deleted by)W
-0.779 N 1.043(, the module that)W
126 697 M 0.031(made. )W
-0.214 N 0.031(The module may freely add to and delete from the copy)W
-0.779 N 0.031(, but see below for a)W
end
66 0 :M
f0_10 sf
( )S
68 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
-18 -8 M ( )S
185 782 M (This document was created with FrameMaker 4.0.4) FmPT
[/CropBox[-18 784 FmDC 594 -8 FmDC]/PAGE FmPD
end
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(Bob Jacobsen; page: 2 of 4)setjob
%%EndPageSetup
gS 0 0 576 776 rC
1 G
-18 -8 612 792 rF
0 G
68 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
end
68 0 :M
f0_10 sf
( )S
70 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
265.368 739.344 M (Page )S
(2)S
( of )S
(4)S
end
71 0 :M
f0_12 sf
( )S
74 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
126 72 M (discussion of ownership of the objects on the lists in this case.)S
104.4 90 M (\245)S
17.402 N (A)S
-0.659 N 0.518( module requesting a list to be used as input data should be capable of handling)W
126 104 M -0.21(an empty list. In particular)W
-0.478 N -0.21(, it may print a status message, but it must terminate nor)W
-0.237 N (-)S
126 118 M (mally)S
-0.779 N (.)S
104.4 136 M (\245)S
17.402 N (A)S
-0.659 N 0.132( module requesting a list to be used as output data must be capable of handling a)W
126 150 M (non-empty list. In this case, it should check its input parameter outputMode:)S
end
74 0 :M
f3_12 sf
( )S
77 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
176.4 168 M (+)S
end
77 0 :M
f0_12 sf
( )S
80 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
198 168 M 3.46(If outputMode = \322ReCreate\323, the module should remove each)W
198 182 M -0.019(object from the list and delete it, then \336)W
-0.019(ll the list with new contents.)W
198 196 M (This is the default behaviour)S
-0.659 N (.)S
end
80 0 :M
f3_12 sf
( )S
83 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
176.4 214 M (+)S
end
83 0 :M
f0_12 sf
( )S
86 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
198 214 M -0.096(If outputMode = \322Create\323, the module should print an error and ter)W
-0.237 N (-)S
198 228 M (minate.)S
end
86 0 :M
f3_12 sf
( )S
89 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
176.4 246 M (+)S
end
89 0 :M
f0_12 sf
( )S
92 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
198 246 M 0.632(If outputMode = \322Append\323, the module should add its new results)W
198 260 M (to the end of the existing list.)S
end
92 0 :M
f3_12 sf
( )S
95 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
176.4 278 M (+)S
end
95 0 :M
f0_12 sf
( )S
98 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
198 278 M 1.756(Other values of the outputMode parameter will be interpreted as)W
198 292 M (documented by the individual module.)S
126 310 M -0.268(Access to parameters is still being standardized. Once done, we expect to provide a)W
126 324 M (standard routine to perform this logic for modules without special requirements.)S
104.4 342 M (\245)S
17.402 N 0.174(An )W
-0.659 N 0.174(AbsEvent object should never return a null list pointer)W
-0.659 N 0.174(. Checks for this may be)W
126 356 M 0.985(omitted. Internal errors which would result in a null pointer being returned from)W
126 370 M (AbsEvent will cause an assert to end execution.)S
end
98 0 :M
f1_14 sf
( )S
101 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
54 401.333 M (4)S
29 N (Use of listed objects)S
end
101 0 :M
f0_12 sf
( )S
104 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
104.4 421 M (\245)S
17.402 N (The )S
-0.659 N (AbsEvent object owns the objects on the list\(s\). )S
-0.214 N (Therefore, the module must)S
end
104 0 :M
f3_12 sf
( )S
107 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
176.4 439 M (+)S
end
107 0 :M
f0_12 sf
( )S
110 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
198 439 M (Never delete an object that is on an )S
-0.659 N (AbsEvent list)S
end
110 0 :M
f3_12 sf
( )S
113 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
176.4 457 M (+)S
end
113 0 :M
f0_12 sf
( )S
116 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
198 457 M (Guarantee deletion of objects removed from an )S
-0.659 N (AbsEvent list)S
end
116 0 :M
f3_12 sf
( )S
119 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
176.4 475 M (+)S
end
119 0 :M
f0_12 sf
( )S
122 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
198 475 M -0.124(Only add objects that have been created with \322new\323 to a list. In par)W
-0.237 N (-)S
198 489 M (ticular)S
-0.478 N 1.269(, do not add automatic variables or elements of an array of)W
198 503 M (objects to a list.)S
104.4 521 M (\245)S
17.402 N 0.165(The lists and objects on them will be deleted at some point after all event process-)W
126 535 M (ing is done, but nothing further can be assumed. In particular)S
-0.478 N (, a module must:)S
end
122 0 :M
f3_12 sf
( )S
125 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
176.4 553 M (+)S
end
125 0 :M
f0_12 sf
( )S
128 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
198 553 M 0.008(Not assume that the list of a given type will be the same from event)W
198 567 M 0.418(to event. E.g. caching the pointer to avoid having to make a call to)W
198 581 M (getAtcDigiAList in the next event is forbidden)S
end
128 0 :M
f3_12 sf
( )S
131 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
176.4 599 M (+)S
end
131 0 :M
f0_12 sf
( )S
134 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
198 599 M 0.223(Not assume that destructors of objects on lists will be called before)W
198 613 M 2.132(the next event is processed. )W
-0.214 N 2.132(This restriction is present to permit)W
198 627 M 0.827(deferred output of events. In particular)W
-0.478 N 0.827(, it is bad design to put any)W
198 641 M 1.964(computation or side-ef)W
-0.214 N 1.964(fects in the destructors of objects, as they)W
198 655 M (might not be destroyed in the desired order)S
-0.659 N (.)S
104.4 673 M (\245)S
17.402 N 0.618(In the case of objects with variable internal state \(e.g. \337)W
0.618(ags that af)W
-0.214 N 0.618(fect which cor)W
-0.237 N (-)S
126 687 M 1.955(rections are applied, etc.\), a module cannot assume any particular values upon)W
126 701 M -0.235(receiving a list. It is good practice to explicitly reset any important values. It is also)W
[/CropBox[-18 784 FmDC 594 -8 FmDC]/PAGE FmPD
end
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(Bob Jacobsen; page: 3 of 4)setjob
%%EndPageSetup
gS 0 0 576 776 rC
1 G
-18 -8 612 792 rF
0 G
134 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
end
134 0 :M
f0_10 sf
( )S
136 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
265.368 739.344 M (Page )S
(3)S
( of )S
(4)S
end
137 0 :M
f0_12 sf
( )S
140 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
126 72 M (good practice for the object design to provide an explicit reset member function.)S
end
140 0 :M
f1_14 sf
( )S
143 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
54 103.333 M (5)S
29 N (Use of temporar)S
(y lists)S
end
143 0 :M
f0_12 sf
( )S
146 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
104.4 123 M -0.143(Note that temporary lists are not yet implemented in )W
-0.659 N -0.143(AbsEvent. )W
-0.214 N -0.143(The following informa-)W
90 137 M (tion is for planning purposes.)S
104.4 155 M (\245)S
17.402 N 1.254(The temporary lists must be created by a module, and can then be stored in the)W
126 169 M (AbsEvent module using the putT)S
-0.838 N (empList member function:)S
end
146 0 :M
f2_10 sf
( )S
152 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
140.4 185.667 M 0 0 348(if \(ev->putTempList\(list, \322name\323\)\) { /* handle error */ };)FmTx
end
152 0 :M
f0_12 sf
( )S
155 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
126 203 M 2.785(The \336)W
2.785(rst ar)W
-0.214 N 2.785(gument is a pointer of type )W
end
155 0 :M
f2_10 sf
( )S
161 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
332.668 203 M 0 0 120(HepAList<something>*)FmTx
end
161 0 :M
f0_12 sf
( )S
164 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
452.668 203 M 2.785(. )W
-0.214 N 2.785(The second,)W
126 217 M -0.082(which is optional, can be either a string or an int and is used to dif)W
-0.214 N -0.082(ferentiate among)W
126 231 M 1.093(multiple lists of the same type. putT)W
-0.838 N 1.093(empList returns false if an item of the same)W
126 245 M (type and name exists, in which case the new temporary list was not stored.)S
104.4 263 M (\245)S
17.402 N (A)S
-0.659 N ( temporary list can be retrieved with)S
end
164 0 :M
f2_10 sf
( )S
170 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
140.4 279.667 M 0 0 348(if \(ev->getTempList\(list, \322name\323\)\) { /* handle error */ };)FmTx
end
170 0 :M
f0_12 sf
( )S
173 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
126 297 M 0.865(The ar)W
-0.214 N 0.865(guments are the same as putT)W
-0.838 N 0.865(empList. getT)W
-0.838 N 0.865(empList will return false is the)W
126 311 M 1.866(requested list is not available. Note that name must be exact, and must not be)W
126 325 M 0.113(present if not used when the list was stored. )W
-0.214 N 0.113(The temporary list remains part of the)W
126 339 M (event until deleted.)S
104.4 357 M (\245)S
17.402 N (A)S
-0.659 N ( temporary list can be removed from the event with)S
end
173 0 :M
f2_10 sf
( )S
179 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
140.4 373.667 M 0 0 342(if \(ev->rmTempList\(list, \322name\323\)\) { /* handle error */ };)FmTx
end
179 0 :M
f0_12 sf
( )S
182 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
126 391 M 0.976(The ar)W
-0.214 N 0.976(guments are the same as putT)W
-0.838 N 0.976(empList. rmT)W
-0.838 N 0.976(empList will return false is the)W
126 405 M 1.866(requested list is not available. Note that name must be exact, and must not be)W
126 419 M (present if not used when the list was stored.)S
104.4 437 M (\245)S
17.402 N 0.062(The error conditions should be handled by assert\(0\) as a minimum. Failure to han-)W
126 451 M 2.741(dle the error conditions will result in a \322formally unde\336)W
2.741(ned program\323, better)W
126 465 M (known as a program with memory leaks and/or segmentation violations.)S
104.4 483 M (\245)S
17.402 N 2.544(Memory management of temporary lists is the responsibility of the )W
-0.659 N (AbsEvent)S
126 497 M -0.069(object if and only if while they are present in the )W
-0.659 N -0.069(AbsEvent object. In particular)W
-0.478 N -0.069(, an)W
126 511 M 1.983(AbsEvent object will delete all the objects contained by a temporary list, then)W
126 525 M 0.058(delete the temporary list itself when the )W
-0.659 N 0.058(AbsEvent object is destroyed at the end of)W
126 539 M (the event processing. )S
-0.214 N (This implies:)S
end
182 0 :M
f3_12 sf
( )S
185 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
176.4 557 M (+)S
end
185 0 :M
f0_12 sf
( )S
188 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
198 557 M (A)S
-0.659 N 0.29( temporary list can be safely left in the )W
-0.659 N 0.29(AbsEvent object if the list)W
198 571 M (owns all its contained objects.)S
end
188 0 :M
f3_12 sf
( )S
191 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
176.4 589 M (+)S
end
191 0 :M
f0_12 sf
( )S
194 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
198 589 M -0.23(If a module wishes to take ownership of a list and the objects it con-)W
198 603 M 0.125(tains, it should removed it from the )W
-0.659 N 0.125(AbsEvent with the rmT)W
-0.838 N (empList)S
198 617 M (method.)S
end
194 0 :M
f3_12 sf
( )S
197 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
176.4 635 M (+)S
end
197 0 :M
f0_12 sf
( )S
200 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
198 635 M 2.38(If a multiple modules may reference a given temporary list, all)W
198 649 M (should leave it in the event and allow the )S
-0.659 N (AbsEvent to free it.)S
end
200 0 :M
f1_14 sf
( )S
203 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
54 680.333 M (6)S
29 N (Possible implementation details)S
end
204 0 :M
f0_12 sf
( )S
207 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
104.4 700 M 0.423(The )W
-0.659 N 0.423(AbsEvent class is abstract in the sense that we expect no instances of it. Each I/O)W
[/CropBox[-18 784 FmDC 594 -8 FmDC]/PAGE FmPD
end
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(Bob Jacobsen; page: 4 of 4)setjob
%%EndPageSetup
gS 0 0 576 776 rC
1 G
-18 -8 612 792 rF
0 G
207 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
end
207 0 :M
f0_10 sf
( )S
209 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
265.368 739.344 M (Page )S
(4)S
( of )S
(4)S
end
210 0 :M
f0_12 sf
( )S
213 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
90 72 M 2.163(system will likely have its own subclass of )W
-0.659 N 2.163(AbsEvent for retrieving and storing data.)W
90 86 M 3.346(AbsEvent will have signi\336)W
3.346(cant code for handling temporary lists, and creation and)W
90 100 M 0.089(destruction of the permanent lists; a subclass should only override these if absolutely nec-)W
90 114 M (essary)S
-0.779 N (.)S
end
213 0 :M
f1_14 sf
( )S
216 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
54 145.333 M (7)S
29 N (Histor)S
(y)S
end
216 0 :M
f0_12 sf
( )S
219 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
90 165 M 2.188(The permanent list part of )W
-0.659 N 2.188(AbsEvent was \336)W
2.188(rst prototyped by Harlan Robins and Bob)W
90 179 M 0.336(Jacobsen for Colias and )W
-0.659 N 0.336(ASCII data during the summer of 1995. )W
-0.214 N 0.336(The temporary data pro-)W
90 193 M 0.556(posal is based in part on discussions with David Quarrie and Jamie Shiers. Some discus-)W
90 207 M (sion items and emails can be found on the common reconstruction )S
-0.214 N (W)S
-0.958 N (eb page, )S
end
219 0 :M
f2_10 sf
( )S
225 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
140.4 223.667 M 0 0 348(http://www.slac.stanford.edu/BF/doc/www/CompRecCommon.html)FmTx
end
225 0 :M
f0_12 sf
( )S
228 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
104.4 241 M 1.497(Starting at the September 1995 Collaboration Meeting, concentrated ef)W
-0.214 N 1.497(fort has gone)W
90 255 M 3.026(into implementing )W
-0.659 N 3.026(AbsEvent using dbio as the underlying transport mechanism. )W
-0.214 N (W)S
-0.958 N (e)S
90 269 M -0.169(intend to have this functional and in use by the end of 1995. It is likely that some other I/O)W
90 283 M 0.673(system will be the default by the start of BaBar running, but we intend to stick with this)W
90 297 M (interface so long as possible.)S
[/CropBox[-18 784 FmDC 594 -8 FmDC]/PAGE FmPD
end
endp
%%Trailer
end		% md
%%EOF
