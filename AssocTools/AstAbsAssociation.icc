//--------------------------------------------------------------------------
// File and Version Information:
// 	$Id: AstAbsAssociation.icc 436 2010-01-13 16:51:56Z stroili $
//
// Description:
//	Class AstAbsAssociation
//      Abstract interface for simple one to one associations
//
// Environment:
//	Software developed for the BaBar Detector at the SLAC B-Factory.
//
// Author List:
//      Phil Strother           LBNL
//
//------------------------------------------------------------------------

#include "BaBar/BaBar.hh"
 
//-----------------------
// This Class's Header --
//-----------------------

#include "AssocTools/AstAbsAssociation.hh"

//-------------
// C Headers --
//-------------
extern "C" {
}

//---------------
// C++ Headers --
//---------------

//-------------------------------
// Collaborating Class Headers --
//-------------------------------

//-----------------------------------------------------------------------
// Local Macros, Typedefs, Structures, Unions and Forward Declarations --
//-----------------------------------------------------------------------

#ifndef   BABAR_COMP_INST
static const char rscid[] = "$Id: AstAbsAssociation.icc 436 2010-01-13 16:51:56Z stroili $";
#endif // BABAR_COMP_INST

//              ----------------------------------------
//              -- Public Function Member Definitions --
//              ----------------------------------------

//----------------
// Constructors --
//----------------


template<class T1, class T2>
AstAbsAssociation< T1,  T2>::AstAbsAssociation()
{}

// Copy constructor

template<class T1, class T2>
AstAbsAssociation< T1,  T2>::AstAbsAssociation(const AstAbsAssociation<T1, T2> 
					       &other)
{}

//--------------
// Destructor --
//--------------


template<class T1, class T2>
AstAbsAssociation< T1,  T2>::~AstAbsAssociation()
{}

//-------------
// Methods   --
//-------------
    
//-------------
// Operators --
//-------------



template<class T1, class T2>
bool 
AstAbsAssociation<T1, T2>::operator==(const AstAbsAssociation<T1, T2> &other) const
{
  return ((this->firstArgument() == other.firstArgument()) &&
	  (this->secondArgument() == other.secondArgument()));
}


template<class T1, class T2>
bool 
AstAbsAssociation<T1, T2>::operator!=(const AstAbsAssociation<T1, T2> &other) const
{
  return (! (*this==other));
}
