//  PacDKPointInfo.cc   26 October 2008
//   revised version 23 November 2008
//
// Objects in this class will cache information
// related to where a track decays in space,
// It is anticipated that the information will
// be generated by a PacDKPointGenerator using
// the set[...] methods.
//
//
//  Carol Fabby, Mike Sokoloff  
//

#include "BaBar/BaBar.hh"

#include "PacGeom/PacPieceTraj.hh"
#include "PacSim/PacDKPointInfo.hh"
#include "PacSim/PacSimTrack.hh"
#include "PDT/PdtEntry.hh"
#include "PDT/PdtLund.hh"
#include "G3Data/GTrack.hh"
#include <iostream>
#include <assert.h>
#include <float.h>


using namespace std;


// the constructor initializes a few data members
// the remaining data members are set externally
// the data members are available via accessor methods

PacDKPointInfo::PacDKPointInfo(){
//  provide default values for some of the class variables
  _mightDecayInDetector = false;
  _decaysInDetector = false;
  _properDecayLength = -99.0;
  _decayHitIndex = -99;
}

PacDKPointInfo::PacDKPointInfo(const PacDKPointInfo& other)
  :  _pdtEntry(other._pdtEntry),
  _mightDecayInDetector(other._mightDecayInDetector),
  _decaysInDetector(other._decaysInDetector), 
  _properDecayLength(other._properDecayLength),
  _decayHitIndex(other._decayHitIndex),
  _decayPoint(other._decayPoint),
  _decayDirection(other._decayDirection),
  _decayPointMom (other._decayPointMom),
  _decayFltLen(other._decayFltLen)
{}

// this method returns the proper decay length in cm
double
PacDKPointInfo::properDecayLength() const {
  return _properDecayLength;
}

// this method returns a boolean flag which is generally
// not useful to general users. However, it may be useful
// if someone wants to study how often _mightDecayInDetector
// is found to be true when _decaysInDetector is false
bool
PacDKPointInfo::mightDecayInDetector() const {
  return _mightDecayInDetector;
}

// this method returns a boolean flag which reports whether
//  the track decays inside the detector volume
bool
PacDKPointInfo::decaysInDetector() const {
  return _decaysInDetector;
}

// this method returns the hit index in the PacSimTrack*
// corresponding to the point where the track decays.
// NB: if the track does not decay inside the detector
// volume, this method should NOT be invoked; the method
// will assert rather than provide the unsuspecting user 
// with nonsensical value. This method should be invoked
// only if decaysInDetector returns true.
int
PacDKPointInfo::decayHitIndex() const {
  assert(_mightDecayInDetector);
  return _decayHitIndex;
}

// this method returns the PdtEntry which has been derived from 
// that of the GTrack in the PacSimTrack*
// corresponding to the point where the track decays.
const PdtEntry *
PacDKPointInfo::pdtEntry() const {
  return _pdtEntry;
}

// this method returns the spatial point where the track
// decays inside the detector. NB: if the track does not
// decay inside the detector volume, this method should NOT
// be invoked; the method will assert rather than provide
// the unsuspecting user with a nonsensical value. This method
// should be invoked only if decaysInDetector returns true.
const HepPoint&
PacDKPointInfo::decayPoint() const {
  assert(_mightDecayInDetector);
  return _decayPoint;
}

// this method returns track direction where the track
// decays inside the detector. NB: if the track does not
// decay inside the detector volume, this method should NOT
// be invoked; the method will assert rather than provide
// the unsuspecting user with a nonsensical value. This method
// should be invoked only if decaysInDetector returns true.
const Hep3Vector&
PacDKPointInfo::decayDirection() const {
  assert(_mightDecayInDetector);
  return _decayDirection;
}

// this method returns track direction where the track
// decays inside the detector. NB: if the track does not
// decay inside the detector volume, this method should NOT
// be invoked; the method will assert rather than provide
// the unsuspecting user with a nonsensical value. This method
// should be invoked only if decaysInDetector returns true.
Hep3Vector
PacDKPointInfo::decayPoint3Mom() const {
  assert(_mightDecayInDetector);
  double px = _decayDirection.x()*_decayPointMom;
  double py = _decayDirection.y()*_decayPointMom;
  double pz = _decayDirection.z()*_decayPointMom;
  Hep3Vector momentum(px,py,pz);
  return momentum;
}

// this method returns magnitude of momentum where the track
// decays inside the detector. NB: if the track does not
// decay inside the detector volume, this method should NOT
// be invoked; the method will assert rather than provide
// the unsuspecting user with a nonsensical value. This method
// should be invoked only if decaysInDetector returns true.
double
PacDKPointInfo::decayPointMom() const {
  assert(_mightDecayInDetector);
  return _decayPointMom;
}

// this method returns the lab flight length to the point where
// the track decays inside the detector. NB: if the track does not
// decay inside the detector volume, this method should NOT
// be invoked; the method will assert rather than provide
// the unsuspecting user with a nonsensical value. This method
// should be invoked only if decaysInDetector returns true.
double
PacDKPointInfo::decayFltLen() const {
  assert(_mightDecayInDetector);
  return _decayFltLen;
}

void
PacDKPointInfo::setPdtEntry(const PdtEntry* pdtEntry){
  _pdtEntry = pdtEntry;
}

void
PacDKPointInfo::setMightDecayInDetector(bool truthVal){
  _mightDecayInDetector = truthVal;
}

void
PacDKPointInfo::setDecaysInDetector(bool truthVal) {
  _decaysInDetector = truthVal;
}

void
PacDKPointInfo::setProperDecayLength(double decayLength) {
  _properDecayLength = decayLength;
}

void 
PacDKPointInfo::setDecayHitIndex(int index) {
  _decayHitIndex = index;
}

void
PacDKPointInfo::setDecayPoint(HepPoint decayPoint) {
  _decayPoint = decayPoint;
}

void
PacDKPointInfo::setDecayDirection(Hep3Vector decayDirection) {
  _decayDirection = decayDirection;
}

void
PacDKPointInfo::setDecayPointMom(double momentumMagnitude) {
  _decayPointMom = momentumMagnitude;
}

void
PacDKPointInfo::setDecayFltLen(double fltlen) {
  _decayFltLen = fltlen;
}

PacDKPointInfo&
PacDKPointInfo::operator = (const PacDKPointInfo& other) {
  if(this != &other)  {
    _pdtEntry = other._pdtEntry;
    _mightDecayInDetector = other._mightDecayInDetector;
    _decaysInDetector = other._decaysInDetector;
    _properDecayLength = other._properDecayLength;
    _decayHitIndex = other._decayHitIndex;
    _decayPoint = other._decayPoint;
    _decayDirection = other._decayDirection;
    _decayPointMom = other._decayPointMom;
    _decayFltLen = other._decayFltLen;
  }
  return *this;
}


// a basic destructor
PacDKPointInfo::~PacDKPointInfo(){
}
