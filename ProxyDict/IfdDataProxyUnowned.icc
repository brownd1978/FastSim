//--------------------------------------------------------------------------
// File and Version Information:
// 	$Id: IfdDataProxyUnowned.icc 520 2010-01-15 11:40:48Z stroili $
//
// Description:
//      IfdDataProxyUnowned.hh is forced to implement all the meothds because of DEC
//      cxx.  However, HP-UX complains about no .cc file.  So here we have
//      an empty one.
//      
//      EXCLUDE THIS FILE FROM THE LIST OF .CC FILE TO COMPILE!
//
// Environment:
//	Software developed for the BaBar Detector at the SLAC B-Factory.
//
// Author List:
//      Ed Frank		University of Pennsylvania
//
// Copyright Information:
//	Copyright (C) 1997
//
//------------------------------------------------------------------------
#include "BaBar/BaBar.hh"

//-----------------------
// This Class's Header --
//-----------------------
#include "ProxyDict/IfdDataProxyUnowned.hh"

#include <stdlib.h>


//		----------------------------------------
// 		-- Public Function Member Definitions --
//		----------------------------------------

//----------------
// Constructors --
//----------------

template <class T>
IfdDataProxyUnowned<T>::IfdDataProxyUnowned(T* t)
   : handler( 0 )
{ 
  this->_myT = t;
  this->setCacheIsValid();
}

template <class T>
IfdDataProxyUnowned<T>::IfdDataProxyUnowned(T* (*f)(const IfdKey& ))
   : handler( f )
{}

template <class T>
IfdDataProxyUnowned<T>::IfdDataProxyUnowned() {
  ::abort();
}


//--------------
// Destructor --
//--------------

//-------------
// Methods   --
//-------------
    
template <class T>
T*
IfdDataProxyUnowned<T>::faultHandler(IfdProxyDict*, const IfdKey& k, AbsArg& ) {
  this->setCacheIsValid();
  return handler( k );
}

template <class T>
void
IfdDataProxyUnowned<T>::storeHandler(IfdProxyDict*, const IfdKey& k, AbsArg&, T* )
{}

template <class T>
void
IfdDataProxyUnowned<T>::testCache( void )
     // We provide an implementation of testCache() that thinks
     // that its cache is never invalid.  This is useful for the simple
     // case where the proxy just holds a list and does not use any
     // kind of faulting, e.g., when ctor IfdDataProxyUnowned<T>( T* t)  is used.
{}

//-------------
// Operators --
//-------------
    
//-------------
// Selectors --
//-------------
    
//-------------
// Modifiers --
//-------------

//		-----------------------------------------------
// 		-- Static Data & Function Member Definitions --
//		-----------------------------------------------

//		-------------------------------------------
// 		-- Protected Function Member Definitions --
//		-------------------------------------------

//		-----------------------------------------
// 		-- Private Function Member Definitions --
//		-----------------------------------------

//		-----------------------------------
// 		-- Internal Function Definitions --
//		-----------------------------------
