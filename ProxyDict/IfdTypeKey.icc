//--------------------------------------------------------------------------
// File and Version Information:
//    $Id: IfdTypeKey.icc 520 2010-01-15 11:40:48Z stroili $
//
// Description:
//
// Author List:
//    Ed Frank                        University of Pennsylvania
//
// History:
//    Ed Frank      17 Nov 96         Creation of first version
//    Ed Frank      22 Nov 96         Make this an empty file, effectively.
//                                    See the .hh file for explanation.
//    SJ Gowdy       5 May 97         Added BaBar.hh for HP templates
//
// Bugs:
//
//------------------------------------------------------------------------
#include "BaBar/BaBar.hh"

#include "ProxyDict/IfdTypeKey.hh"
#if !(defined(__GNUC__) && (__GNUC__ < 3) && (__GNUC_MINOR__ < 95)) // BABAR_IOSTREAMS_MIGRATION
using std::ostream;
#endif                                                              // BABAR_IOSTREAMS_MIGRATION


#ifndef IFDTYPEKEY_SPECIALIZE

template <class T>
IfdTypeKey<T>::IfdTypeKey() 
{
  setMyId(); 
  _hashVal = intVal % _nHashBuckets;
}

template <class T>
void
IfdTypeKey<T>::setMyId(void) {
  // this is not a mem. leak.  Do not delete in the destructor.
  //
   static IfdCounter *_myId = 0;
   if (!_myId) _myId= new IfdCounter;
   intVal = _myId->value();
   return;
}

template <class T>
char*
IfdTypeKey<T>::name(const char* newName) {
  // this is not a mem. leak.  Do not delete in the destructor.
  // A non-null newName resets the name.
  // Bug:  a) once set yu may change it, but never fully get rid of it.
  //       b) unprotected strcpy (not strncpy).
  //
   static char* _myName = 0;

   if ( 0 != newName ) {
     delete[] _myName;   // invariant: always 0 or pting to owned mem.
     _myName = new char[ strlen( newName )+1 ];
     strcpy( _myName, newName);
   }

   return _myName;
}

template <class T>
void
IfdTypeKey<T>::print( ostream &o ) const { 
   if ( IfdTypeKey<T>::name(0) ) {
       o << "IfdTypeKey(" << IfdTypeKey<T>::name(0) << "/" << intVal << ")";
   } else {
       o << "IfdTypeKey(" << intVal << ")";
   }
   return;
}


#endif

